import{$ as h,N as E,P as a,Q as T,R as F,S as P,T as s,V as d,X as y,_ as l,aa as c}from"./chunk-IWNF2QU4.js";import{c as f,k as b,u as m,x as g}from"./chunk-XL3YBMFF.js";import{a as p}from"./chunk-SIAVTO45.js";var $=(()=>{class u{constructor(e){this.firestore=e,this.coleccionTurnos=[],this.turnos=[],this.guardarTurnoSubject=new f(!1),this.obtenerTurnosSubject=new f(!1),this.turnosCollection=s(this.firestore,"turnos")}ngOnDestroy(){this.sub.unsubscribe()}guardarTurno(e){let r=s(this.firestore,"turnos");F(r,{fecha:e.fecha,hora:e.hora,idEspecialista:e.idEspecialista,idPaciente:e.idPaciente,especialidad:e.especialidad,estado:"pendiente",nombreEspecialista:e.nombreEspecialista,apellidoEspecialista:e.apellidoEspecialista,nombrePaciente:e.nombrePaciente,apellidoPaciente:e.apellidoPaciente}).then(()=>{console.log("Turno guardado con \xE9xito"),this.guardarTurnoSubject.next(!0)}).catch(o=>{console.error("Error al guardar el turno: ",o),this.guardarTurnoSubject.next(!1)})}getTurnos(){let e=s(this.firestore,"turnos");return a(e,{idField:"id"})}obtenerTurnosByField(e,r){if(r===void 0)return console.error(`Error: El valor para el campo ${e} es undefined.`),b([]);let o=l(s(this.firestore,"turnos"),c(e,"==",r));return a(o,{idField:"id"})}obtenerTurnosPorPacienteYFields(e,r,o){if(r.length!==o.length)throw new Error("El n\xFAmero de campos y valores debe ser igual.");let t=[c("idPaciente","==",e)];for(let n=0;n<r.length;n++)t.push(c(r[n],"==",o[n]));let i=l(s(this.firestore,"turnos"),...t);return a(i,{idField:"id"})}obtenerTurnosPorEspecialistaYFields(e,r,o){if(r.length!==o.length)throw new Error("El n\xFAmero de campos y valores debe ser igual.");let t=[c("idEspecialista","==",e)];for(let n=0;n<r.length;n++)t.push(c(r[n],"==",o[n]));let i=l(s(this.firestore,"turnos"),...t);return a(i,{idField:"id"})}obtenerTurnosPorFields(e,r){if(e.length!==r.length)throw new Error("El n\xFAmero de campos y valores debe ser igual.");let o=[];for(let i=0;i<e.length;i++)o.push(c(e[i],"==",r[i]));let t=l(s(this.firestore,"turnos"),...o);return a(t,{idField:"id"})}obtenerTurnoPorIdEspecialistaFechaYHora(e,r,o){let t=l(s(this.firestore,"turnos"),P(c("idEspecialista","==",e),c("fecha","==",r),c("hora","==",o)));return y(t).then(i=>{if(i.empty)return console.log("No existe el documento"),null;{let n=i.docs[0];return p({id:n.id},n.data())}}).catch(i=>(console.error("Error al obtener el turno: ",i),null))}setTurnoField(e,r,o){let t=d(this.firestore,`turnos/${e}`);return h(t,{[r]:o})}cancelarTurno(e,r){let o=d(this.firestore,`turnos/${e}`);return h(o,{estado:"cancelado",motivosCancelacion:r})}rechazarTurno(e,r){let o=d(this.firestore,`turnos/${e}`);return h(o,{estado:"rechazado",motivosRechazo:r})}calificarTurno(e,r,o){let t=d(this.firestore,`turnos/${e}`);return h(t,{calificacion:{estrellas:o,comentario:r}})}obtenerResenaDeTurno(e){let r=d(this.firestore,`rese\xF1as/${e}`);return T(r,{idField:"id"})}obtenerTurnosPorPaciente(e){let r=s(this.firestore,"turnos"),o=l(r,c("idPaciente","==",e));return a(o,{idField:"id"})}obtenerTurnosPorEspecialista(e){let r=s(this.firestore,"turnos"),o=l(r,c("idEspecialista","==",e));return a(o,{idField:"id"})}obtenerTodosLosTurnos(){let e=s(this.firestore,"turnos");return a(e,{idField:"id"})}static{this.\u0275fac=function(r){return new(r||u)(g(E))}}static{this.\u0275prov=m({token:u,factory:u.\u0275fac,providedIn:"root"})}}return u})();export{$ as a};
